package org.mondo.collaboration.security.arbiter

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://mondo.org/collaboration/security/arbiter/vocabulary"

import java org.eclipse.emf.common.util.Enumerator
import java org.eclipse.mondo.collaboration.securitry.arbiter.vocabulary.BoundDirection

pattern judgement(user: java String,
	asset: EObject, op: SecurityOperation, 
	bound: java Enumerator, dir: BoundDirection, 
	prio: java Integer) 
{
	find explicitJudgement(user, asset, op, bound, dir, prio);
} or {
	find relaxedJudgement(user, asset, op, bound, dir, prio);
} or {
	// strong consequence judgement of a (dominant) judgement
	find strongConsequence(user, asset, op, bound, dir, prio, _domAsset, _domOp, _domBound);	
}

pattern relaxedJudgement(user: java String,
	asset: EObject, op: SecurityOperation, 
	bound: java Enumerator, dir: BoundDirection, 
	prio: java Integer) 
{
	find domination(user, asset, op, _dominatedBound, dir, prio, bound, _prevailingPrio);
}


pattern effectiveJudgement(user: java String,
	asset: EObject, op: SecurityOperation, 
	bound: java Enumerator, dir: BoundDirection, 
	prio: java Integer) 
{
	find judgement(user, asset, op, bound, dir, prio);
	neg find domination(user, asset, op, bound, dir, prio, _, _);
} 

pattern domination(user: java String,
	asset: EObject, op: SecurityOperation, 
	dominatedBound: java Enumerator, dominatedDir: BoundDirection, dominatedPrio: java Integer,
	prevailingBound: java Enumerator, prevailingPrio: java Integer) 
{
	// NOTE: subsumption is included as well
	find judgement(user, asset, op, dominatedBound, dominatedDir, dominatedPrio); 
	find effectiveJudgement(user, asset, op, prevailingBound, prevailingDir, prevailingPrio);
	check (
		(prevailingPrio > dominatedPrio)  // TODO or equal, but dominating direction
		&& (
			prevailingDir == BoundDirection::AT_MOST && prevailingBound.value < dominatedBound.value ||
			prevailingDir == BoundDirection::AT_LEAST && prevailingBound.value > dominatedBound.value
		) 
		// && (dominatedDir != prevailingDir) - omitting this ensures that subsumption is included as well
	);	
}  

pattern strongConsequence(user: java String,
	depAsset: EObject, depOp: SecurityOperation, depBound: java Enumerator, 
	dir: BoundDirection, prio: java Integer,
	domAsset: EObject, domOp: SecurityOperation, domBound: java Enumerator) 
{
	// type II, read vs write, AT_LEAST
	find effectiveJudgement(user, domAsset, domOp, domBound, dir, prio);
	depAsset == domAsset; dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::WRITE; depOp == SecurityOperation::READ;
	domBound == WriteLevels::ALLOW_WRITE; depBound == ReadLevels::ALLOW_READ; 
} or {
	// type II, read vs write, AT_MOST
	find effectiveJudgement(user, domAsset, domOp, domBound, dir, prio);
	depAsset == domAsset; dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::WRITE;
	domBound != ReadLevels::ALLOW_READ; depBound == WriteLevels::BLIND_DELETABLE_WRITE; 
} or {
	// type III, read vs containment, AT_LEAST
	find effectiveJudgement(user, domAsset, domOp, domBound, dir, prio);
	find contains(depAsset, domAsset);
	dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::OBFUSCATE_READ; depBound == ReadLevels::OBFUSCATE_READ; 
} or {
	// type III, read vs containment, AT_MOST
	find effectiveJudgement(user, domAsset, domOp, domBound, dir, prio);
	find contains(domAsset, depAsset);
	dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::DENY_READ; depBound == ReadLevels::DENY_READ; 
}
