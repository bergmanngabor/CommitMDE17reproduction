package org.mondo.collaboration.security.arbiter

import "http://www.eclipse.org/emf/2002/Ecore"
import "http://mondo.org/collaboration/security/arbiter/vocabulary"

import java org.eclipse.emf.common.util.Enumerator
import java org.eclipse.mondo.collaboration.securitry.arbiter.vocabulary.BoundDirection
import java org.eclipse.mondo.collaboration.securitry.arbiter.vocabulary.SecurityOperation


pattern effectiveJudgement(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find effectiveJudgement_at_0(user, asset, op, bound, dir);
	} or {
	find effectiveJudgement_at_2(user, asset, op, bound, dir);
	} or {
	find effectiveJudgement_at_3(user, asset, op, bound, dir);
} 


pattern judgement_at_0(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find explicitJudgement(user, asset, op, bound, dir, 0);
} or {
	// relaxed judgement
	find relaxedJudgement_at_0(user, asset, op, bound, dir);
} or {
	// strong consequence judgement of a (dominant) judgement
	find strongConsequence_at_0(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
//} or {
//	// weak consequence judgement of a (dominant) judgement
//	find weakConsequence_at_0_of_0(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
//} or {
//	// weak consequence judgement of a (dominant) judgement
//	find weakConsequence_at_0_of_2(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
//} or {
//	// weak consequence judgement of a (dominant) judgement
//	find weakConsequence_at_0_of_3(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
}
pattern judgement_at_2(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find explicitJudgement(user, asset, op, bound, dir, 2);
} or {
	// relaxed judgement
	find relaxedJudgement_at_2(user, asset, op, bound, dir);
} or {
	// strong consequence judgement of a (dominant) judgement
	find strongConsequence_at_2(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
//} or {
//	// weak consequence judgement of a (dominant) judgement
//	find weakConsequence_at_2_of_2(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
//} or {
//	// weak consequence judgement of a (dominant) judgement
//	find weakConsequence_at_2_of_3(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
}
pattern judgement_at_3(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find explicitJudgement(user, asset, op, bound, dir, 3);
} or {
	// strong consequence judgement of a (dominant) judgement
	find strongConsequence_at_3(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
//} or {
//	// weak consequence judgement of a (dominant) judgement
//	find weakConsequence_at_3_of_3(user, asset, op, bound, dir, _domAsset, _domOp, _domBound);
}

pattern relaxedJudgement_at_0(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection)
{
	find judgement_at_0(user, asset, op, dominatedBound, dir);
	find domination_of_0(user, asset, op, _dominatedBound, bound);
}
pattern relaxedJudgement_at_2(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection)
{
	find judgement_at_2(user, asset, op, dominatedBound, dir);
	find domination_of_2(user, asset, op, _dominatedBound, bound);
}

pattern effectiveJudgement_at_0(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find judgement_at_0(user, asset, op, bound, dir);
	neg find domination_of_0(user, asset, op, bound, _prevailingBound);
} 
pattern effectiveJudgement_at_2(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find judgement_at_2(user, asset, op, bound, dir);
	neg find domination_of_2(user, asset, op, bound, _prevailingBound);
} 
pattern effectiveJudgement_at_3(user: java String,
	asset: EObject, op: java SecurityOperation, 
	bound, dir: java BoundDirection) 
{
	find judgement_at_3(user, asset, op, bound, dir);
} 

pattern domination_of_0(user: java String,
	asset: EObject, op: java SecurityOperation, 
	dominatedBound, prevailingBound) 
{
	find domination_by_2(user, asset, op, dominatedBound, prevailingBound);
	} or {
	find domination_by_3(user, asset, op, dominatedBound, prevailingBound);
} 
pattern domination_of_2(user: java String,
	asset: EObject, op: java SecurityOperation, 
	dominatedBound, prevailingBound) 
{
	find domination_by_3(user, asset, op, dominatedBound, prevailingBound);
} 

pattern domination_by_2(user: java String,
	asset: EObject, op: java SecurityOperation, 
	dominatedBound, prevailingBound) 
{
	// NOTE: subsumption is included as well
	find effectiveJudgement_at_2(user, asset, op, prevailingBound, prevailingDir);
	find permissionOutOfBound(prevailingDir, prevailingBound, dominatedBound);
}  
pattern domination_by_3(user: java String,
	asset: EObject, op: java SecurityOperation, 
	dominatedBound, prevailingBound) 
{
	// NOTE: subsumption is included as well
	find effectiveJudgement_at_3(user, asset, op, prevailingBound, prevailingDir);
	find permissionOutOfBound(prevailingDir, prevailingBound, dominatedBound);
}  

pattern readPermissionLevel(level) = {
	level == ReadLevels::ALLOW_READ;
} or {
	level == ReadLevels::OBFUSCATE_READ;
} or {
	level == ReadLevels::DENY_READ;
}

pattern writePermissionLevel(level) = {
	level == WriteLevels::ALLOW_WRITE;
} or {
	level == WriteLevels::BLIND_DELETABLE_WRITE;
} or {
	level == WriteLevels::DENY_WRITE;
}

pattern permissionOutOfBound(prevailingDir: java BoundDirection,
	prevailingBound, dominatedBound
) = {
	find readPermissionLevel(prevailingBound);
	find readPermissionLevel(dominatedBound);
	prevailingDir == eval(
		if (prevailingBound.value < dominatedBound.value) 
			BoundDirection::AT_MOST
		else if (prevailingBound.value > dominatedBound.value)
			BoundDirection::AT_LEAST
		else null	
	);
}


pattern strongConsequence_at_0(user: java String,
	depAsset: EObject, depOp: java SecurityOperation, depBound, 
	dir: java BoundDirection,
	domAsset: EObject, domOp: java SecurityOperation, domBound: java Enumerator) 
{
	// type II, read vs write, AT_LEAST
	find effectiveJudgement_at_0(user, domAsset, domOp, domBound, dir);
	depAsset == domAsset; dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::WRITE; depOp == SecurityOperation::READ;
	domBound == WriteLevels::ALLOW_WRITE; depBound == ReadLevels::ALLOW_READ; 
} or {
	// type II, read vs write, AT_MOST
	find effectiveJudgement_at_0(user, domAsset, domOp, domBound, dir);
	depAsset == domAsset; dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::WRITE;
	domBound != ReadLevels::ALLOW_READ; depBound == WriteLevels::BLIND_DELETABLE_WRITE; 
} or {
	// type III, read vs containment, AT_LEAST
	find effectiveJudgement_at_0(user, domAsset, domOp, domBound, dir);
	find contains(depAsset, domAsset);
	dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::OBFUSCATE_READ; depBound == ReadLevels::OBFUSCATE_READ; 
} or {
	// type III, read vs containment, AT_MOST
	find effectiveJudgement_at_0(user, domAsset, domOp, domBound, dir);
	find contains(domAsset, depAsset);
	dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::DENY_READ; depBound == ReadLevels::DENY_READ; 
}
pattern strongConsequence_at_2(user: java String,
	depAsset: EObject, depOp: java SecurityOperation, depBound, 
	dir: java BoundDirection,
	domAsset: EObject, domOp: java SecurityOperation, domBound: java Enumerator) 
{
	// type II, read vs write, AT_LEAST
	find effectiveJudgement_at_2(user, domAsset, domOp, domBound, dir);
	depAsset == domAsset; dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::WRITE; depOp == SecurityOperation::READ;
	domBound == WriteLevels::ALLOW_WRITE; depBound == ReadLevels::ALLOW_READ; 
} or {
	// type II, read vs write, AT_MOST
	find effectiveJudgement_at_2(user, domAsset, domOp, domBound, dir);
	depAsset == domAsset; dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::WRITE;
	domBound != ReadLevels::ALLOW_READ; depBound == WriteLevels::BLIND_DELETABLE_WRITE; 
} or {
	// type III, read vs containment, AT_LEAST
	find effectiveJudgement_at_2(user, domAsset, domOp, domBound, dir);
	find contains(depAsset, domAsset);
	dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::OBFUSCATE_READ; depBound == ReadLevels::OBFUSCATE_READ; 
} or {
	// type III, read vs containment, AT_MOST
	find effectiveJudgement_at_2(user, domAsset, domOp, domBound, dir);
	find contains(domAsset, depAsset);
	dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::DENY_READ; depBound == ReadLevels::DENY_READ; 
}
pattern strongConsequence_at_3(user: java String,
	depAsset: EObject, depOp: java SecurityOperation, depBound, 
	dir: java BoundDirection,
	domAsset: EObject, domOp: java SecurityOperation, domBound: java Enumerator) 
{
	// type II, read vs write, AT_LEAST
	find effectiveJudgement_at_3(user, domAsset, domOp, domBound, dir);
	depAsset == domAsset; dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::WRITE; depOp == SecurityOperation::READ;
	domBound == WriteLevels::ALLOW_WRITE; depBound == ReadLevels::ALLOW_READ; 
} or {
	// type II, read vs write, AT_MOST
	find effectiveJudgement_at_3(user, domAsset, domOp, domBound, dir);
	depAsset == domAsset; dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::WRITE;
	domBound != ReadLevels::ALLOW_READ; depBound == WriteLevels::BLIND_DELETABLE_WRITE; 
} or {
	// type III, read vs containment, AT_LEAST
	find effectiveJudgement_at_3(user, domAsset, domOp, domBound, dir);
	find contains(depAsset, domAsset);
	dir == BoundDirection::AT_LEAST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::OBFUSCATE_READ; depBound == ReadLevels::OBFUSCATE_READ; 
} or {
	// type III, read vs containment, AT_MOST
	find effectiveJudgement_at_3(user, domAsset, domOp, domBound, dir);
	find contains(domAsset, depAsset);
	dir == BoundDirection::AT_MOST;
	domOp == SecurityOperation::READ; depOp == SecurityOperation::READ;
	domBound == ReadLevels::DENY_READ; depBound == ReadLevels::DENY_READ; 
}

//pattern weakConsequence(user: java String,
//	depAsset: EObject, depOp: java SecurityOperation, depBound, 
//	dir: java BoundDirection, depPrio: java Integer,
//	domAsset: EObject, domOp: java SecurityOperation, domBound,
//	domPrio: java Integer) 
//{
//	depPrio == 1;
//	// TODO implement; not needed for example
//}

